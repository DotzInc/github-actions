name: 'Sonarqube .NET Scanner'
description: 'Quality Gate Sonarqube for .NET projects'

inputs:
  sonar-verbose:
    required: false
    type: boolean
    default: false
  sonar-sources:
    required: false
    type: string
    default: "."
  sonar-report-paths:
    required: false
    type: string
    default: "coverage.xml"
  sonar-source-encoding:
    required: false
    type: string
    default: "UTF-8"
  sonar-exclusions:
    required: false
    type: string
    default: "**/bin/**,**/obj/**,**/TestResults/**,**/Tests/**,**/*.py"
  sonar-host-url:
    required: true
    type: string
  sonar-api-token:
    required: true
    type: string
  sonar-token:
    required: true
    type: string
  sonar-project-key:
    required: true
    type: string
  sonar-timeout:
    required: false
    type: string
    default: "300"
  sonar-dotnet-version:
    required: false
    type: string
    default: "8.0.x"
  sonar-project-name:
    required: true
    type: string


runs:
  using: composite
  steps:
    # - name: SonarQube Scan
    #   uses: sonarsource/sonarqube-scan-action@v5.2.0
    #   with:
    #     args: >
    #       -Dsonar.inclusions=**/*.cs
    #       -Dsonar.sources=${{ inputs.sonar-sources }}
    #       -Dsonar.projectBaseDir=${{ inputs.sonar-sources }}
    #       -Dsonar.projectKey=${{ inputs.sonar-project-key }}
    #       -Dsonar.projectName=${{ inputs.sonar-project-name }}
    #       -Dsonar.cs.opencover.reportsPaths=${{ inputs.sonar-report-paths }}
    #       -Dsonar.exclusions=${{ inputs.sonar-exclusions }}
    #       -Dsonar.scanner.skipSystemTruststore=true
    #       -Dsonar.scanner.forceReload=true
    #       -Dsonar.cs.analyzer.projectOutPaths=bin/Debug/net8.0
    #   env:
    #     SONAR_TOKEN: ${{ inputs.sonar-token }}
    #     SONAR_HOST_URL: ${{ inputs.sonar-host-url }}
    - name: Install SonarScanner
      shell: bash
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Start SonarQube Analysis
      shell: bash
      run: |
        dotnet sonarscanner begin \
          /k:"${{ inputs.sonar-project-key }}" \
          /n:"${{ inputs.sonar-project-name }}" \
          /d:sonar.host.url="${{ inputs.sonar-host-url }}" \
          /d:sonar.login="${{ inputs.sonar-token }}" \
          /d:sonar.cs.opencover.reportsPaths="${{ inputs.sonar-report-paths }}" \
          /d:sonar.verbose="${{ inputs.sonar-verbose }}"
    
    - name: Build
      shell: bash
      run: dotnet build ${{ inputs.sonar-project-name }}.sln --no-restore
    
    - name: End SonarQube Analysis
      shell: bash
      run: |
        dotnet sonarscanner end \
          /d:sonar.login="${{ inputs.sonar-token }}"

    - name: Check SonarQube Quality Gate Status
      id: sonarqube-status
      shell: bash
      continue-on-error: true
      run: ${{ github.action_path }}/sonarqube-status.sh
      env:
        SONAR_PROJECT_KEY: ${{ inputs.sonar-project-key }}
        SONAR_TOKEN: ${{ inputs.sonar-api-token }}
        SONAR_HOST_URL: ${{ inputs.sonar-host-url }}

    - name: Get Coverage
      shell: bash
      id: coverage-calc
      if: steps.sonarqube-status.outputs.status == 'OK'
      continue-on-error: true
      run: ${{ github.action_path }}/coverage-calc.sh

    - name: Update Quality Gates Sonarqube
      shell: bash
      id: quality-gates-sonarqube
      if: steps.sonarqube-status.outputs.status == 'OK'
      continue-on-error: true
      run: ${{ github.action_path }}/quality-gates-sonarqube.sh
      env:
        SONAR_PROJECT_KEY: ${{ inputs.sonar-project-key }}
        SONAR_TOKEN: ${{ inputs.sonar-api-token }}
        SONAR_HOST_URL: ${{ inputs.sonar-host-url }}
        LEGACY_COV_NUM: ${{ steps.coverage-calc.outputs.coverage }}
